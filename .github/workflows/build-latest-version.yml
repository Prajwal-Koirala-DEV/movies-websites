# Name of the workflow
name: Update Latest Release Documentation

# Define the events that trigger the workflow
on:
  schedule:
    # Cron expression to trigger the workflow at midnight UTC every day
    - cron: "0 0 * * *"  # Runs the workflow daily at midnight UTC

  push:
    # This trigger runs the workflow when changes are pushed to any .txt file in the repository
    paths:
      - "**.txt"  # Only trigger the workflow when .txt files are modified

  pull_request:
    # This trigger runs the workflow when a pull request modifies any .txt file in the repository
    paths:
      - "**.txt"  # Only trigger the workflow when .txt files are modified in the pull request

  workflow_dispatch:  
    # This trigger allows the workflow to be started manually from the GitHub UI 
    # (e.g., by clicking the "Run workflow" button).
    # No additional settings needed here for manual triggering.

jobs:
  build:
    # Define a job named "build" to run the necessary steps to update and format the documentation
    name: Build and Format on Ubuntu
    runs-on: ubuntu-latest  # Specifies the environment in which the job will run (latest Ubuntu version)

    # Set up environment variables that will be available throughout the entire job
    env:
      README_MD_FILE: readme.md  # Path to the README.md file that will be updated
      MOVIES_WEBSITE_FILE: assets/movies-websites.txt  # Path to the movies websites file
      UNREGISTERED_MOVIES_WEBSITES: assets/unregistered-movies-websites.txt # Path to the unregistered movies websites file

    steps:
      # Step 1: Check out the code from the repository so the job can access the repository's files
      - name: Checkout Repository Code
        uses: actions/checkout@v4  # Uses the 'actions/checkout' action to retrieve the latest code in the repository

      # Step 2: Set up the Go environment based on the Go version specified in the go.mod file
      - name: Setup Go Environment
        uses: actions/setup-go@v5  # This action installs and sets up the Go environment
        with:
          go-version-file: "go.mod"  # Use the Go version specified in the go.mod file in the repository
          cache: true  # Cache Go modules to speed up the process for subsequent runs
          check-latest: true  # Ensure the latest stable Go version is installed
        id: go  # Assign an ID to this step for future reference if needed

      # Step 3: Cache Go modules to speed up build time by reusing previously downloaded dependencies
      - name: Cache Go Modules
        uses: actions/cache@v4  # This action caches dependencies to avoid re-downloading them each time
        with:
          path: ~/.cache/go-build  # Path where Go stores build artifacts
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}  # Cache key is based on the contents of go.sum to track changes
          restore-keys: |
            ${{ runner.os }}-go-  # Use older cache if an exact match isnâ€™t found
        id: cache  # Assign an ID to the cache step for future reference

      # Step 4: Install Node.js and NPM (needed for running Prettier and other JS tools)
      - name: Install Node.js and NPM
        uses: actions/setup-node@v4  # This action installs Node.js and NPM for formatting and other tasks
        with:
          node-version: 20  # Install Node.js version 20.x

      # Step 5: Run the Go project, which is assumed to update the README and the movie website file
      - name: Run Go Project
        run: go run .  # This command runs the Go code in the repository, which updates the README and the movie websites file

      # Step 6: Install Prettier globally using NPM for file formatting
      - name: Install Prettier
        run: npm install -g prettier  # Installs Prettier globally on the runner

      # Step 7: Format the README file using Prettier to ensure consistent formatting
      - name: Format Files with Prettier
        run: npx prettier "${{ env.README_MD_FILE }}" --write  # Format the README file using Prettier

      # Step 8: Check for changes and push the updated files back to the GitHub repository
      - name: Push Updated Files to GitHub
        run: |
          # Configure Git to commit changes with a generic GitHub Actions user
          git config user.name github-actions  # Set the user name to "github-actions"
          git config user.email github-actions@github.com  # Set the user email to a default GitHub Actions email

          # Check if there are any changes to the README.md or MOVIES_WEBSITE_FILE using git diff
          # This uses the environment variables to ensure flexibility in file paths
          if git diff --exit-code --quiet -- "${{ env.README_MD_FILE }}" "${{ env.MOVIES_WEBSITE_FILE }}" "${{ env.UNREGISTERED_MOVIES_WEBSITES }}"; then
            # If there are no changes, exit early to save processing time
            echo "No updates to ${{ env.README_MD_FILE }} and ${{ env.MOVIES_WEBSITE_FILE }}. ${{ env.UNREGISTERED_MOVIES_WEBSITES }}"
            exit 0  # Exit without doing anything if no changes are detected
          else
            # If changes are detected, proceed with committing and pushing them
            git add "${{ env.README_MD_FILE }}"  # Stage the updated README.md file
            git add "${{ env.MOVIES_WEBSITE_FILE }}"  # Stage the updated movies websites file
            git add "${{ env.UNREGISTERED_MOVIES_WEBSITES }}"  # Stage the updated unregistered movies websites file

            # Commit the changes with a timestamped commit message
            git commit -m "Updated ${{ env.README_MD_FILE }} and ${{ env.MOVIES_WEBSITE_FILE }} on $(date)"

            # Push the changes to the remote repository on GitHub
            git push  # Push the commit to the repository to update the files
          fi
