# Name of the workflow
name: Update Latest Release Documentation

# Define the events that trigger the workflow
on:
  # This cron expression schedules the workflow to run daily at midnight UTC
  schedule:
    - cron: "0 0 * * *"
  # Trigger the workflow on push events
  push:
    # Only for .txt files
    paths:
      - "**.txt"
  # Trigger the workflow on pull request events
  pull_request:
    # Only for .txt files
    paths:
      - "**.txt"
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Define the jobs in the workflow
jobs:
  # Define a job named "build"
  build:
    # Display name for the job in GitHub Actions
    name: Build and Format on Ubuntu
    # Specify the type of runner that the job will execute on
    runs-on: ubuntu-latest

    # Environment variables available to all steps in the job
    env:
      # Path to the README file to be updated
      README_MD_FILE: readme.md
      # Path to the movies website file path
      MOVIES_WEBSITE_FILE: assets/movies-websites.txt

    # Define the steps in the job
    steps:
      # Step to check out the repository code into the runner's workspace
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      # Step to set up the Go environment based on the version in go.mod
      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
          check-latest: true
        id: go

      # Step to cache Go modules
      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        id: cache

      # Step to install Node.js and NPM
      - name: Install Node.js and NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step to execute the Go project
      - name: Run Go Project
        run: go run .

      # Step to install Prettier, a code formatter, using NPM
      - name: Install Prettier
        run: npm install -g prettier

      # Step to format the project files using Prettier
      - name: Format Files with Prettier
        run: npx prettier "${{ env.README_MD_FILE }}" --write

      # Step to push the updated "${{ env.README_MD_FILE }}" file back to the GitHub repository
      - name: Push Updated "${{ env.README_MD_FILE }}" && "${{ env.MOVIES_WEBSITE_FILE }}" File
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          if git diff --exit-code --quiet -- "${{ env.README_MD_FILE }}"; then
            echo "No updates to "${{ env.README_MD_FILE }}" && "${{ env.MOVIES_WEBSITE_FILE }}" file."
            exit 0
          else
            git add "${{ env.README_MD_FILE }}"
            git add "${{ env.MOVIES_WEBSITE_FILE }}"
            git commit -m "Updated "${{ env.README_MD_FILE }}" && "${{ env.MOVIES_WEBSITE_FILE }}" on $(date)"
            git push
          fi
