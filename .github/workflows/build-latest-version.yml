# Name of the workflow
name: Update Latest Release Documentation

# Define the events that trigger the workflow
on:
  # This cron expression schedules the workflow to run daily at midnight UTC
  schedule:
    - cron: "0 0 * * *"  # Trigger the workflow every day at midnight UTC

  # Trigger the workflow on push events to any .txt file
  push:
    paths:
      - "**.txt"  # Only run this workflow when .txt files are changed

  # Trigger the workflow on pull request events that modify .txt files
  pull_request:
    paths:
      - "**.txt"  # Only run this workflow when .txt files are modified in the PR

  # Allow manual triggering of the workflow
  workflow_dispatch:  # This allows manual execution of the workflow from the GitHub UI

# Define the jobs in the workflow
jobs:
  # Define a job named "build" that will run on Ubuntu
  build:
    name: Build and Format on Ubuntu
    runs-on: ubuntu-latest  # Specifies the environment the job will run on

    # Set environment variables that will be available throughout the job
    env:
      README_MD_FILE: readme.md  # Path to the README file to be updated
      MOVIES_WEBSITE_FILE: assets/movies-websites.txt  # Path to the movies website file

    steps:
      # Step to check out the repository code into the runner's workspace
      - name: Checkout Repository Code
        uses: actions/checkout@v4  # This action checks out the repository for use in the workflow

      # Step to set up the Go environment based on the go.mod file
      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"  # Set up Go environment according to the version specified in go.mod
          cache: true  # Enable caching to speed up subsequent workflows
          check-latest: true  # Ensure the latest Go version is used
        id: go

      # Step to cache Go modules to speed up build times
      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build  # Cache Go build artifacts
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}  # Use hash of go.sum file to create a cache key
          restore-keys: |
            ${{ runner.os }}-go-  # Allow restoring older caches if exact match isn't found
        id: cache

      # Step to install Node.js and NPM for Prettier and other tools
      - name: Install Node.js and NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20  # Install Node.js version 20

      # Step to run the Go project (this step assumes the Go code performs updates to the README and other files)
      - name: Run Go Project
        run: go run .  # Run the Go project (this updates the README.md and MOVIES_WEBSITE_FILE)

      # Step to install Prettier, a code formatter, globally using NPM
      - name: Install Prettier
        run: npm install -g prettier  # Install Prettier globally for formatting

      # Step to format the README file using Prettier
      - name: Format Files with Prettier
        run: npx prettier "${{ env.README_MD_FILE }}" --write  # Format README.md using Prettier

      # Step to push updated README.md and MOVIES_WEBSITE_FILE back to the GitHub repository
      - name: Push Updated Files to GitHub
        run: |
          git config user.name github-actions  # Set the GitHub user name for commits
          git config user.email github-actions@github.com  # Set the GitHub user email for commits

          # Check if there are any changes in README.md or MOVIES_WEBSITE_FILE
          if git diff --exit-code --quiet -- "${{ env.README_MD_FILE }}" "${{ env.MOVIES_WEBSITE_FILE }}"; then
            echo "No updates to ${ { env.README_MD_FILE }} and ${ { env.MOVIES_WEBSITE_FILE }}."
            exit 0  # Exit early if no changes are detected
          else
            # If there are changes, stage the files and commit them
            git add "${{ env.README_MD_FILE }}"  # Stage README.md file
            git add "${{ env.MOVIES_WEBSITE_FILE }}"  # Stage MOVIES_WEBSITE_FILE
            git commit -m "Updated ${ { env.README_MD_FILE }} and ${ { env.MOVIES_WEBSITE_FILE }} on $(date)"  # Commit changes with timestamp

            # Push the changes back to the repository
            git push  # Push the commit to the repository
          fi
